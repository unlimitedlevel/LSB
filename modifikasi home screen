import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:supabase_flutter/supabase_flutter.dart';
import '../services/supabase_service.dart'; // Pastikan path ini benar
import '../models/hazard_report.dart'; // Pastikan path ini benar
import 'report_form_screen.dart'; // Pastikan path ini benar
import 'package:intl/intl.dart';
import 'report_detail_screen.dart'; // Pastikan path ini benar

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  late Future<List<HazardReport>> _reportsFuture;
  final SupabaseService _supabaseService = SupabaseService();
  bool _isSupabaseInitialized = false;
  bool _isTableCreated = false;
  String _tableCreationMessage = '';
  final FocusNode _focusNode = FocusNode(); // Focus node for refresh
  WidgetsBindingObserver? _lifecycleObserver; // Observer instance

  @override
  void initState() {
    super.initState();
    _reportsFuture = Future.value([]); // Initial initialization
    _checkSupabaseInitialization();

    // Listener untuk refresh otomatis saat halaman kembali aktif
    _lifecycleObserver = _AppLifecycleObserver(_loadReports);
    WidgetsBinding.instance.addObserver(_lifecycleObserver!);
  }

  @override
  void dispose() {
    _focusNode.dispose(); // Don't forget to dispose focus node
    if (_lifecycleObserver != null) {
      WidgetsBinding.instance.removeObserver(_lifecycleObserver!); // Remove observer
    }
    super.dispose();
  }


  void _checkSupabaseInitialization() {
    try {
      // Try accessing the client, failure means not initialized
      Supabase.instance.client;
      if (mounted) { // Check mounted before setState
        setState(() {
          _isSupabaseInitialized = true;
        });
      }
      // Continue initialization if Supabase is ready
      _initializeAsyncDependencies();
    } catch (e) {
      if (mounted) { // Check mounted before setState
        setState(() {
          _isSupabaseInitialized = false;
          _reportsFuture = Future.value([]); // Set to empty future on failure
        });
      }
      debugPrint('Supabase not initialized: $e');
      // No need to load reports or check table if Supabase is not available
    }
  }

  // Separate async process after checking Supabase
  Future<void> _initializeAsyncDependencies() async {
    await _createTableIfNeeded();
    _loadReports(); // Load reports after checking table
  }


  Future<void> _createTableIfNeeded() async {
    // Only run if Supabase is available
    if (!_isSupabaseInitialized) return;

    String message;
    bool created = false;
    try {
      created = await _supabaseService.createTableIfNotExists();
      message = created
          ? 'Tabel hazard_reports siap digunakan.'
          : 'Tabel hazard_reports tidak ditemukan. Mohon buat manual.';
    } catch (e) {
      message = 'Gagal memeriksa/membuat tabel: ${e.toString()}';
      debugPrint('Error checking/creating table: $e');
      created = false; // Ensure status is false on error
    }

    // Check if widget is still mounted before calling setState
    if (mounted) {
      setState(() {
        _isTableCreated = created;
        _tableCreationMessage = message;
      });
    }
  }

  void _loadReports() {
    // Only load if Supabase initialized and table exists (or was created)
    if (_isSupabaseInitialized && _isTableCreated) {
       // Check mounted before setState to avoid errors if widget is disposed
      if (mounted) {
        setState(() {
          _reportsFuture = _supabaseService.getHazardReports();
        });
      }
    } else if (_isSupabaseInitialized && !_isTableCreated) {
       // If Supabase exists but table doesn't, show table error message
       if (mounted) {
         setState(() {
           // Set future to error so FutureBuilder shows the table error message
           _reportsFuture = Future.error(Exception(_tableCreationMessage.isNotEmpty ? _tableCreationMessage : 'Tabel tidak ditemukan.'));
         });
       }
    }
     else {
       // If Supabase is not initialized, set to empty future
      if (mounted) {
        setState(() {
          _reportsFuture = Future.value([]);
        });
      }
    }
  }

  // Function for navigation and refresh
  void _navigateAndRefresh() {
     Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => const ReportFormScreen()),
      ).then((result) {
        // Refresh data if there's a result from the form (e.g., true on successful submit)
        // or always refresh after returning (assume result is null if user backs out without saving)
        if (result == true || result == null) {
          _loadReports();
        }
      });
  }


  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context); // Get the current theme

    return Scaffold(
      appBar: AppBar(
        title: const Text('Laporan Sumber Bahaya (LSB)'),
        // You can uncomment these for more M3 styling if needed
        // elevation: 1, // Subtle shadow for modern appbar
        // backgroundColor: theme.colorScheme.surface, // Appbar color from theme
        // foregroundColor: theme.colorScheme.onSurface, // Appbar text/icon color from theme
      ),
      body: _buildMainContent(theme), // Pass theme to build content
      floatingActionButton: FloatingActionButton.extended( // Use Extended FAB
        onPressed: _navigateAndRefresh,
        icon: const Icon(Icons.add),
        label: const Text('Tambah Laporan'),
        // Optional M3 styling:
        // backgroundColor: theme.colorScheme.primary,
        // foregroundColor: theme.colorScheme.onPrimary,
      ),
    );
  }

  // Widget untuk Banner Info
  Widget _buildInfoBanner(String message, IconData icon, Color backgroundColor, Color iconColor) {
    return Container(
      width: double.infinity,
      color: backgroundColor,
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
      child: Row(
        children: [
          Icon(icon, color: iconColor, size: 20),
          const SizedBox(width: 12),
          Expanded(
            child: Text(
              message,
              style: TextStyle(fontSize: 13, color: iconColor.withOpacity(0.9)),
            ),
          ),
        ],
      ),
    );
  }

  // Widget untuk Status Koneksi Supabase & Tabel
 Widget _buildStatusSection(ThemeData theme) {
    List<Widget> statusWidgets = [];

    // Banner Mode Demo (Jika Supabase tidak terinisialisasi)
    if (!_isSupabaseInitialized) {
      statusWidgets.add(
        _buildInfoBanner(
          'Mode Demo Aktif. Konfigurasi Supabase di .env untuk fitur penuh.',
          Icons.info_outline,
          theme.colorScheme.secondaryContainer.withOpacity(0.5),
          theme.colorScheme.onSecondaryContainer,
        ),
      );
    }

     // Banner Peringatan Web (jika berjalan di web)
    if (kIsWeb) {
      statusWidgets.add(
        _buildInfoBanner(
          'Berjalan di Web. Fitur seperti kamera mungkin terbatas.',
          Icons.web_asset_outlined, // Ikon yang lebih cocok
          theme.colorScheme.tertiaryContainer.withOpacity(0.5),
          theme.colorScheme.onTertiaryContainer,
        ),
      );
    }

    // Banner Status Koneksi Supabase dan Tabel (jika Supabase terinisialisasi)
    if (_isSupabaseInitialized) {
       final Color bgColor = _isTableCreated
          ? Colors.green.shade50 // Warna sukses lembut
          : theme.colorScheme.errorContainer.withOpacity(0.5); // Warna error lembut
      final Color fgColor = _isTableCreated
          ? Colors.green.shade900
          : theme.colorScheme.onErrorContainer;
      final IconData icon = _isTableCreated ? Icons.check_circle_outline : Icons.error_outline;
      final String mainMessage = _isTableCreated ? 'Terhubung & Tabel Siap.' : 'Terhubung, tapi Tabel Bermasalah.';

      statusWidgets.add(
         Container(
            width: double.infinity,
            color: bgColor,
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Icon(icon, color: fgColor, size: 20),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                       Text(
                        mainMessage,
                         style: TextStyle(fontSize: 13, color: fgColor.withOpacity(0.9), fontWeight: FontWeight.w500),
                      ),
                      if (_tableCreationMessage.isNotEmpty)
                        Padding(
                          padding: const EdgeInsets.only(top: 2.0),
                          child: Text(
                            _tableCreationMessage,
                            style: TextStyle(fontSize: 11, color: fgColor.withOpacity(0.7)),
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          )
      );
    }

    // Don't display anything if there are no status messages
    if (statusWidgets.isEmpty) {
      return const SizedBox.shrink();
    }

    // Combine all banners in one Column
    return Column(children: statusWidgets);
 }


  // Widget Utama Body
  Widget _buildMainContent(ThemeData theme) {
    return RefreshIndicator(
      onRefresh: () async {
        _loadReports(); // Just call loadReports
      },
      child: Column(
        children: [
          // Display the status section above the list
          _buildStatusSection(theme),

          // Expanded to fill remaining space with the list
          Expanded(
            child: FutureBuilder<List<HazardReport>>(
              future: _reportsFuture,
              builder: (context, snapshot) {
                // --- Loading State ---
                if (snapshot.connectionState == ConnectionState.waiting) {
                  // Display a more modern loading indicator (e.g., shimmer/skeleton)
                  // For simplicity, use CircularProgressIndicator for now
                  return _buildLoadingIndicator();
                }
                // --- Error State ---
                else if (snapshot.hasError) {
                  // Display a better error widget
                  return _buildErrorWidget(snapshot.error.toString());
                }
                // --- Empty State ---
                else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                  // Display the empty list widget
                  // Only display if Supabase is initialized & table is ready
                  if (_isSupabaseInitialized && _isTableCreated) {
                     return _buildEmptyListWidget();
                  } else {
                     // If not ready, show loading or status message from banner
                     return _buildLoadingIndicator(); // Or another status widget
                  }

                }
                // --- Success State (Data Loaded) ---
                else {
                  final reports = snapshot.data!;
                  // Use ListView.separated for dividers
                  return ListView.separated(
                    padding: const EdgeInsets.all(16.0), // Padding around the list
                    itemCount: reports.length,
                    itemBuilder: (context, index) {
                      final report = reports[index];
                      return _buildReportCard(report, theme); // Pass theme to the card
                    },
                    separatorBuilder: (context, index) => Divider(
                      height: 1, // Divider height (including space)
                      thickness: 1, // Line thickness
                      color: theme.dividerColor.withOpacity(0.1), // Divider color from theme
                      indent: 16, // Indent from left
                      endIndent: 16, // Indent from right
                    ),
                  );
                }
              },
            ),
          ),
        ],
      ),
    );
  }

 // --- Widget States ---

  Widget _buildLoadingIndicator() {
    return const Center(
      child: Padding(
        padding: EdgeInsets.all(32.0),
        child: CircularProgressIndicator(),
      ),
    );
  }

  Widget _buildErrorWidget(String error) {
    final theme = Theme.of(context); // Get theme here
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.cloud_off_rounded, // Ikon error yang lebih modern
              size: 60,
              color: theme.colorScheme.error,
            ),
            const SizedBox(height: 16),
            Text(
              'Gagal Memuat Laporan',
              style: theme.textTheme.titleLarge?.copyWith(
                color: theme.colorScheme.error
              ),
              textAlign: TextAlign.center,
            ),
             const SizedBox(height: 8),
            Text(
              error, // Show the actual error message
              textAlign: TextAlign.center,
              style: theme.textTheme.bodySmall?.copyWith(
                color: theme.colorScheme.error.withOpacity(0.7)
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEmptyListWidget() {
     final theme = Theme.of(context); // Get theme here
     return Center(
      child: Padding(
        padding: const EdgeInsets.all(32.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.sentiment_dissatisfied_outlined, // Ikon yang relevan
              size: 60,
              color: theme.colorScheme.secondary,
            ),
            const SizedBox(height: 16),
            Text(
              'Belum Ada Laporan',
               style: theme.textTheme.titleLarge?.copyWith(
                color: theme.colorScheme.secondary
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              'Klik tombol "+" untuk menambahkan laporan baru.',
              textAlign: TextAlign.center,
              style: theme.textTheme.bodyMedium,
            ),
          ],
        ),
      ),
    );
  }


  // --- Report Card Widget ---
  Widget _buildReportCard(HazardReport report, ThemeData theme) {
    final dateFormatter = DateFormat('dd MMM yyyy, HH:mm', 'id_ID'); // Include year
    final formattedDate = report.reportDatetime != null
        ? dateFormatter.format(report.reportDatetime!)
        : 'Tanggal tidak tersedia';

    return Card(
       margin: const EdgeInsets.symmetric(vertical: 6), // Vertical margin between cards
      shape: RoundedRectangleBorder(
         // Alternative: Left border with status color
         // side: BorderSide(color: report.statusColor, width: 4),
         borderRadius: BorderRadius.circular(8), // Sedikit rounded corner
         // Optional thin border:
         // side: BorderSide(color: theme.dividerColor.withOpacity(0.2), width: 0.5)
      ),
      clipBehavior: Clip.antiAlias, // Important for InkWell rounded corners
      color: theme.colorScheme.surface, // Card color from theme
      elevation: 0, // Remove default Card shadow if using border/divider
      child: InkWell(
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => ReportDetailScreen(report: report),
            ),
          ).then((_) => _loadReports()); // Refresh after returning from detail
        },
        child: Padding(
          padding: const EdgeInsets.all(12.0), // Inner padding for the card
          child: Row( // Use Row for image on left, text on right
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Kolom Kiri: Gambar Thumbnail
              _buildThumbnail(report.imagePath, theme),
              const SizedBox(width: 12),

              // Kolom Kanan: Detail Teks
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Baris 1: Lokasi (Bold) dan Status (Chip kecil)
                    Row(
                       mainAxisAlignment: MainAxisAlignment.spaceBetween,
                       crossAxisAlignment: CrossAxisAlignment.start,
                       children: [
                          Expanded(
                            child: Text(
                              report.location ?? 'Lokasi Tidak Diketahui',
                              style: theme.textTheme.titleMedium?.copyWith(
                                fontWeight: FontWeight.w600, // Lebih tebal
                                color: theme.colorScheme.onSurface
                              ),
                              maxLines: 2,
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                          const SizedBox(width: 8),
                          _buildStatusChip(report, theme), // Chip status
                       ],
                    ),
                    const SizedBox(height: 6),

                    // Baris 2: Tanggal & Waktu
                    Text(
                      formattedDate,
                      style: theme.textTheme.bodySmall?.copyWith(
                         color: theme.colorScheme.onSurfaceVariant // Warna abu-abu lembut
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 4),

                     // Baris 3: Nama Pelapor
                    if (report.reporterName != null && report.reporterName!.isNotEmpty)
                      Text(
                        'Oleh: ${report.reporterName}',
                        style: theme.textTheme.bodySmall?.copyWith(
                          fontStyle: FontStyle.italic,
                          color: theme.colorScheme.onSurfaceVariant.withOpacity(0.8)
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                     const SizedBox(height: 8),

                    // Baris 4: Deskripsi Singkat (jika perlu)
                    if (report.hazardDescription != null && report.hazardDescription!.isNotEmpty)
                      Text(
                        report.hazardDescription!,
                        style: theme.textTheme.bodyMedium?.copyWith(
                           color: theme.colorScheme.onSurface.withOpacity(0.9)
                        ),
                        maxLines: 2, // Show max 2 lines of description in the list
                        overflow: TextOverflow.ellipsis,
                      ),

                     // Baris 5: Tipe Observasi & No LSB (jika ada) - dibuat lebih kecil
                      Padding(
                        padding: const EdgeInsets.only(top: 8.0),
                        child: Row(
                           mainAxisAlignment: MainAxisAlignment.spaceBetween,
                           children: [
                             if (report.observationType != null)
                                Text(
                                  'Tipe: ${report.observationType}',
                                  style: theme.textTheme.labelSmall?.copyWith(color: theme.colorScheme.secondary),
                                ),
                              if (report.lsbNumber != null && report.lsbNumber!.isNotEmpty)
                                Text(
                                  'LSB: ${report.lsbNumber}',
                                   style: theme.textTheme.labelSmall?.copyWith(color: theme.colorScheme.tertiary, fontWeight: FontWeight.bold),
                                )
                           ],
                        ),
                      )
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }


  // Helper untuk membuat Thumbnail Gambar
  Widget _buildThumbnail(String? imageUrl, ThemeData theme) {
    // Placeholder widget definition
    Widget placeholder = Center(
      child: Icon(
        Icons.image_outlined, // Ikon placeholder
        color: theme.colorScheme.onSurfaceVariant.withOpacity(0.5),
        size: 30,
      ),
    );

    // Error widget definition
    Widget errorWidget = Center(
      child: Icon(
        Icons.broken_image_outlined,
        color: theme.colorScheme.onSurfaceVariant.withOpacity(0.5),
        size: 30,
      ),
    );

    return Container(
       width: 70, // Fixed thumbnail size
       height: 70,
       clipBehavior: Clip.antiAlias, // Clip to shape
       decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(6), // Thumbnail corners
          color: theme.colorScheme.surfaceVariant.withOpacity(0.3), // Placeholder background color
       ),
       child: (imageUrl != null && imageUrl.isNotEmpty && Uri.tryParse(imageUrl)?.hasAbsolutePath == true) // Basic URL validation
          ? Image.network(
              imageUrl,
              fit: BoxFit.cover,
              // Loading builder for placeholder while image loads
              loadingBuilder: (context, child, loadingProgress) {
                 if (loadingProgress == null) return child; // Image finished loading
                 return Center(
                    child: CircularProgressIndicator(
                      strokeWidth: 2.0,
                      value: loadingProgress.expectedTotalBytes != null
                            ? loadingProgress.cumulativeBytesLoaded / loadingProgress.expectedTotalBytes!
                            : null, // Indeterminate progress
                    ),
                 );
              },
              // Error builder if image fails to load
              errorBuilder: (context, error, stackTrace) {
                debugPrint('Error loading image $imageUrl: $error'); // Log error
                return errorWidget;
              },
            )
          : placeholder, // Placeholder if no valid image URL
    );
  }

   // Helper untuk membuat Status Chip
   Widget _buildStatusChip(HazardReport report, ThemeData theme) {
      // Determine the text color based on the background color's brightness
      final Color textColor = report.statusColor.computeLuminance() > 0.5
                             ? Colors.black87 // Use dark text on light background
                             : Colors.white; // Use white text on dark background

      return Chip(
         label: Text(report.statusTranslated),
         labelStyle: theme.textTheme.labelSmall?.copyWith(
            color: textColor, // Dynamically set text color
            fontWeight: FontWeight.bold
         ),
         backgroundColor: report.statusColor, // Color from the model
         padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2), // Padding lebih kecil
         materialTapTargetSize: MaterialTapTargetSize.shrinkWrap, // Kurangi area tap
         visualDensity: VisualDensity.compact, // Buat lebih compact
         side: BorderSide.none, // Hilangkan border default chip
      );
   }
}


// Kelas helper untuk mendeteksi siklus hidup aplikasi (resume)
class _AppLifecycleObserver extends WidgetsBindingObserver { // Make it extends
  final VoidCallback onResumed;

  _AppLifecycleObserver(this.onResumed);

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (state == AppLifecycleState.resumed) {
      onResumed();
    }
  }
}
